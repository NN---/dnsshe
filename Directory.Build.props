<!--EXTERNAL_PROPERTIES: RuntimeIdentifier;MSBuildThisFileDirectory-->
<Project>
  <PropertyGroup>
    <Configurations>Debug;Release</Configurations>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <SignAssembly>True</SignAssembly>
    <DelaySign>False</DelaySign>
    <AssemblyOriginatorKeyFile Condition="'$(Production)' == 'True'">$(MSBuildThisFileDirectory)\build\dnsshe.snk</AssemblyOriginatorKeyFile>

    <Version>0.0.6</Version>

    <Copyright>NN, 2021</Copyright>
    <RepositoryUrl>https://github.com/NN---/dnsshe</RepositoryUrl>

    <Title>dnsshe</Title>
    <Authors>NN</Authors>
    <Company>NN</Company>
    <Product>dnsshe</Product>
    <Description>A .NET wrapper for SSH libraries.</Description>
    <PackageVersion>$(Version)</PackageVersion>
    <PackageProjectUrl>https://github.com/NN---/dnsshe</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>ssh</PackageTags>
    <RepositoryType>git</RepositoryType>

    <PublishRepositoryUrl>True</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>

    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <AnalysisLevel>latest</AnalysisLevel>
    <RunAnalyzers>True</RunAnalyzers>
    <EnableNETAnalyzers>True</EnableNETAnalyzers>
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    <DisableImplicitNamespaceImports>True</DisableImplicitNamespaceImports>

    <!-- Cross platform definitions -->
    <HasRuntimeIdentifier>False</HasRuntimeIdentifier>
    <HasRuntimeIdentifier Condition="'$(RuntimeIdentifier)' != ''">True</HasRuntimeIdentifier>

    <RuntimeIdentifierWindows>False</RuntimeIdentifierWindows>
    <RuntimeIdentifierWindows Condition="$(RuntimeIdentifier.StartsWith('win'))">True</RuntimeIdentifierWindows>
    <RuntimeIdentifierLinux>False</RuntimeIdentifierLinux>
    <RuntimeIdentifierLinux Condition="$(RuntimeIdentifier.StartsWith('linux'))">True</RuntimeIdentifierLinux>
    <RuntimeIdentifierOSX>False</RuntimeIdentifierOSX>
    <RuntimeIdentifierOSX Condition="$(RuntimeIdentifier.StartsWith('osx'))">True</RuntimeIdentifierOSX>

    <BuildWindows>False</BuildWindows>
    <BuildWindows Condition="$([MSBuild]::IsOsPlatform('Windows'))">True</BuildWindows>

    <BuildLinux>False</BuildLinux>
    <BuildLinux Condition=" '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' ">True</BuildLinux>

    <BuildOSX>False</BuildOSX>
    <BuildOSX Condition=" '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' ">True</BuildOSX>

    <DefineConstants Condition="$(RuntimeIdentifierWindows) Or (!$(HasRuntimeIdentifier) And $(BuildWindows))">$(DefineConstants);TARGET_WINDOWS</DefineConstants>
    <DefineConstants Condition="$(RuntimeIdentifierLinux) Or (!$(HasRuntimeIdentifier) And $(BuildLinux))">$(DefineConstants);TARGET_LINUX</DefineConstants>
    <DefineConstants Condition="$(RuntimeIdentifierOSX) Or (!$(HasRuntimeIdentifier) And $(BuildOSX))">$(DefineConstants);TARGET_OSX</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.0-beta-20204-02" PrivateAssets="All"/>
  </ItemGroup>
</Project>
